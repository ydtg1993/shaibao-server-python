"""
Django settings for three_server project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import djcelery
import configparser

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
REDIS_CONF = configparser.ConfigParser()
REDIS_CONF.read(os.path.join(BASE_DIR, 'config/redis_config.ini'))
DATA_CONF = configparser.ConfigParser()
DATA_CONF.read(os.path.join(BASE_DIR, 'config/database_config.ini'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '79j+!4nrx!*r=174_zulpt=9c0$ot(2wyc2)9%#8_s&nr_(qs9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

HALL_MODEL = 'hall.Hall'

# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'celery',
    'django_celery_beat',
    'django_celery_results',

    'game',
    'notice',
    'system',
    'player',
    'hall',
    'mail',
    'announcement',
    'sign',
    'finance'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'three_server.middlewares.tokenmiddleware.AuthTokenMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'three_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'front/dist')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'front/dist/static'),
    os.path.join(BASE_DIR, 'static/'),
    os.path.join(BASE_DIR, 'static/js/'),
]

#  Cache
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_CONF.get('cache', 'LOCATION'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_CONF.get('cache', 'PASSWORD'),

        },
        "TIMEOUT": 3600 * 6
    },
}

#  Web Socket
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [REDIS_CONF.get('channels', 'CHANNELS_HOSTS')],
            "symmetric_encryption_keys": [SECRET_KEY],
        },
    },
}



# WebSocket
ASGI_APPLICATION = 'three_server.routing.application'
WSGI_APPLICATION = 'three_server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.mysql',
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'HOST': DATA_CONF.get('global', 'HOST'),
        'PORT': DATA_CONF.get('global', 'PORT'),
        'NAME': DATA_CONF.get('global', 'NAME'),
        'USER': DATA_CONF.get('global', 'USER'),
        'PASSWORD': DATA_CONF.get('global', 'PASSWORD')
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATETIME_FORMAT = 'Y-m-d H:i:s'

DATE_FORMAT = 'Y-m-d'

# Celery
djcelery.setup_loader()
#
CELERY_BROKER_TRANSPORT = 'redis'
CELERY_BROKER_URL = REDIS_CONF.get('celery', 'BROKER_URL')
CELERY_RESULT_BACKEND = 'django-db'

CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_DJANGO_CELERY_BEAT_TZ_AWARE = False
DJANGO_CELERY_BEAT_TZ_AWARE = False

CELERY_TASK_RESULT_EXPIRES = 10
CELERYD_MAX_TASKS_PER_CHILD = 3
BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}

CELERY_ACCEPT_CONTENT = ['pickle', 'json', 'yaml', 'application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/


BASE_LOG_DIR = os.path.join(BASE_DIR, 'log_file')

INFO_LOG_DIR = os.path.join(BASE_LOG_DIR, 'info')
ERROR_LOG_DIR = os.path.join(BASE_LOG_DIR, 'error')
GAME_LOG_DIR = os.path.join(BASE_LOG_DIR, 'game')

os.mkdir(BASE_LOG_DIR) if not os.path.isdir(BASE_LOG_DIR) else ...
os.mkdir(INFO_LOG_DIR) if not os.path.isdir(INFO_LOG_DIR) else ...
os.mkdir(ERROR_LOG_DIR) if not os.path.isdir(ERROR_LOG_DIR) else ...
os.mkdir(GAME_LOG_DIR) if not os.path.isdir(GAME_LOG_DIR) else ...

LOGGING = {
    'version': 1,  # 保留字
    'disable_existing_loggers': False,  # 禁用已经存在的logger实例
    # 日志文件的格式
    'formatters': {
        # 详细的日志格式
        'standard': {
            'format': '[%(asctime)s][%(threadName)s:%(thread)d][task_id:%(name)s][%(filename)s:%(lineno)d]'
                      '[%(levelname)s][%(message)s]'
        },
        # 简单的日志格式
        'simple': {
            'format': '[%(levelname)s][%(asctime)s][%(filename)s:%(lineno)d]%(message)s'
        },
        # 定义一个特殊的日志格式
        'collect': {
            'format': '{"levelname": "%(levelname)s", "asctime": "%(asctime)s", "location": "%(filename)s:%(lineno)d", "process": "%(process)d", "info": %(message)s}'
        }
    },
    # 过滤器
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        # 在终端打印
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],  # 只有在Django debug为True时才在屏幕打印日志
            'class': 'logging.StreamHandler',  #
            'formatter': 'simple'
        },
        # 默认的
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',       # 保存到文件，自动切
            'when': "D",                                                # D 表示天
            'interval': 1,                                              # 1 表示每1天，每天切割一次日志文件
            'filename': os.path.join(INFO_LOG_DIR, "info.log"),         # 日志文件
            'backupCount': 3,  # 最多备份几个
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        # 专门用来记错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',       # 保存到文件，自动切
            'when': "D",                                                # D 表示天
            'interval': 1,                                              # 1 表示每1天，每天切割一次日志文件
            'filename': os.path.join(ERROR_LOG_DIR, "error.log"),       # 日志文件
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        # 订单日志
        'game': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 保存到文件，自动切
            'when': "D",  # D 表示天
            'interval': 1,  # 1 表示每1天，每天切割一次日志文件
            'filename': os.path.join(GAME_LOG_DIR, "game.log"),
            'backupCount': 5,
            'formatter': 'collect',
            'encoding': "utf-8"
        },
    },
    'loggers': {
        # 默认的logger应用如下配置
        '': {
            'handlers': ['error', 'default', 'console'],  # 上线之后可以把'console'移除
            'level': 'DEBUG',
            'propagate': False,  # 向不向更高级别的logger传递
        },
        # 游戏日志
        'game': {
            'handlers': ['game'],
            'level': 'INFO',
        }
    },
}
